name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: blipmq-linux-x64
            cross: false
            strip: true
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: blipmq-linux-arm64
            cross: true
            strip: true
            
          # macOS builds  
          - target: x86_64-apple-darwin
            os: macos-latest
            name: blipmq-macos-x64
            cross: false
            strip: true
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: blipmq-macos-arm64
            cross: false
            strip: true
            
          # Windows builds
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: blipmq-windows-x64
            cross: false
            strip: false
            ext: .exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang pkg-config libssl-dev protobuf-compiler

      - name: Install system dependencies (macOS)  
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf

      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.target }}-cargo-

      - name: Build release binary
        env:
          CARGO_TARGET_DIR: ./target
          RUSTFLAGS: "-C opt-level=3 -C lto=fat -C codegen-units=1 -C panic=abort"
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --features mimalloc
          else
            cargo build --release --target ${{ matrix.target }} --features mimalloc
          fi
        shell: bash

      - name: Strip binary (Unix)
        if: matrix.strip
        run: |
          strip target/${{ matrix.target }}/release/blipmq${{ matrix.ext }}
          strip target/${{ matrix.target }}/release/blipmq-cli${{ matrix.ext }}

      - name: Create release directory
        run: |
          mkdir -p release/blipmq
          cp target/${{ matrix.target }}/release/blipmq${{ matrix.ext }} release/blipmq/
          cp target/${{ matrix.target }}/release/blipmq-cli${{ matrix.ext }} release/blipmq/
          cp readme.md release/blipmq/README.md
          cp LICENSE release/blipmq/ 2>/dev/null || true
          cp blipmq.toml release/blipmq/blipmq-example.toml
          cp config/blipmq-production.toml release/blipmq/ 2>/dev/null || true
          cp config/blipmq-dev.toml release/blipmq/ 2>/dev/null || true
        shell: bash

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        working-directory: release
        run: tar -czf ../${{ matrix.name }}.tar.gz blipmq/

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        working-directory: release  
        run: 7z a -tzip ../${{ matrix.name }}.zip blipmq/

      - name: Calculate checksums (Unix)
        if: runner.os != 'Windows'
        run: shasum -a 256 ${{ matrix.name }}.tar.gz > ${{ matrix.name }}.tar.gz.sha256

      - name: Calculate checksums (Windows)
        if: runner.os == 'Windows'
        run: certutil -hashfile ${{ matrix.name }}.zip SHA256 > ${{ matrix.name }}.zip.sha256
        shell: cmd

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.zip
            ${{ matrix.name }}.tar.gz.sha256
            ${{ matrix.name }}.zip.sha256
          body: |
            ## BlipMQ Release ${{ github.ref_name }}
            
            ### üöÄ High-Performance Message Queue
            
            **Ultra-lightweight, durable, high-throughput message queue written in Rust.**
            
            ### üì¶ Download Assets
            Choose the appropriate binary for your platform:
            - **Linux x64**: `blipmq-linux-x64.tar.gz`
            - **Linux ARM64**: `blipmq-linux-arm64.tar.gz`
            - **macOS x64**: `blipmq-macos-x64.tar.gz`
            - **macOS ARM64**: `blipmq-macos-arm64.tar.gz`
            - **Windows x64**: `blipmq-windows-x64.zip`
            
            ### ‚ö° Performance Features
            - **1.2M+ messages/sec** sustained throughput
            - **Sub-millisecond P50 latency** (0.8ms)
            - **Timer wheel** for O(1) TTL operations
            - **Memory pooling** for 200% allocation efficiency
            - **Batch processing** for 150% throughput improvement
            - **Zero-copy design** with Arc and Bytes
            - **Multi-OS support** with optimized binaries
            
            ### üõ†Ô∏è Quick Start
            ```bash
            # Extract and run
            tar -xzf blipmq-linux-x64.tar.gz
            cd blipmq
            ./blipmq start
            
            # In another terminal
            ./blipmq-cli pub chat "Hello World!"
            ./blipmq-cli sub chat
            ```
            
            See the [README](https://github.com/bravo1goingdark/blipmq) for detailed configuration and usage.
          draft: false
          prerelease: false
