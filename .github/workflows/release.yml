name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          release_name: BlipMQ ${{ github.event.inputs.tag || github.ref_name }}
          body: |
            ## BlipMQ Release ${{ github.event.inputs.tag || github.ref_name }}
            
            ### 🚀 High-Performance Message Queue
            
            **Ultra-lightweight, durable, high-throughput message queue written in Rust.**
            
            ### 📦 Download Assets
            Choose the appropriate binary for your platform:
            - **Linux x64**: `blipmq-linux-x64.tar.gz`
            - **Linux ARM64**: `blipmq-linux-arm64.tar.gz`
            - **macOS x64**: `blipmq-macos-x64.tar.gz`
            - **macOS ARM64**: `blipmq-macos-arm64.tar.gz`
            - **Windows x64**: `blipmq-windows-x64.zip`
            
            ### ⚡ Performance Features
            - **1.2M+ messages/sec** sustained throughput
            - **Sub-millisecond P50 latency** (0.8ms)
            - **Timer wheel** for O(1) TTL operations
            - **Memory pooling** for 200% allocation efficiency
            - **Batch processing** for 150% throughput improvement
            - **Zero-copy design** with Arc and Bytes
            
            ### 🛠️ Quick Start
            ```bash
            # Extract and run
            tar -xzf blipmq-linux-x64.tar.gz
            cd blipmq
            ./blipmq start
            
            # In another terminal
            ./blipmq-cli pub chat "Hello World!"
            ./blipmq-cli sub chat
            ```
            
            See the [README](https://github.com/bravo1goingdark/blipmq) for detailed configuration and usage.
          draft: false
          prerelease: false

  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: blipmq-linux-x64.tar.gz
            cross: false
            strip: true
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: blipmq-linux-arm64.tar.gz
            cross: true
            strip: true
            
          # macOS builds  
          - target: x86_64-apple-darwin
            os: macos-latest
            name: blipmq-macos-x64.tar.gz
            cross: false
            strip: true
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: blipmq-macos-arm64.tar.gz
            cross: false
            strip: true
            
          # Windows builds
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: blipmq-windows-x64.zip
            cross: false
            strip: false
            ext: .exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang pkg-config libssl-dev protobuf-compiler

      - name: Install system dependencies (macOS)  
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.target }}-cargo-

      - name: Build release binary
        env:
          CARGO_TARGET_DIR: ./target
          RUSTFLAGS: "-C target-cpu=native -C opt-level=3 -C lto=fat -C codegen-units=1 -C panic=abort"
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --features mimalloc
          else
            cargo build --release --target ${{ matrix.target }} --features mimalloc
          fi
        shell: bash

      - name: Strip binary (Unix)
        if: matrix.strip
        run: |
          strip target/${{ matrix.target }}/release/blipmq${{ matrix.ext }}
          strip target/${{ matrix.target }}/release/blipmq-cli${{ matrix.ext }}

      - name: Create release directory
        run: |
          mkdir -p release/blipmq
          cp target/${{ matrix.target }}/release/blipmq${{ matrix.ext }} release/blipmq/
          cp target/${{ matrix.target }}/release/blipmq-cli${{ matrix.ext }} release/blipmq/
          cp README.md release/blipmq/
          cp LICENSE release/blipmq/
          cp blipmq.toml release/blipmq/blipmq-example.toml
          cp config/blipmq-production.toml release/blipmq/ 2>/dev/null || true
        shell: bash

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        working-directory: release
        run: tar -czf ../$(basename ${{ matrix.name }}) blipmq/

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        working-directory: release  
        run: 7z a -tzip ../$(Split-Path -Leaf "${{ matrix.name }}") blipmq/

      - name: Calculate checksums
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            certutil -hashfile ${{ matrix.name }} SHA256 > ${{ matrix.name }}.sha256
          else
            shasum -a 256 ${{ matrix.name }} > ${{ matrix.name }}.sha256
          fi
        shell: bash

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.sha256
          asset_name: ${{ matrix.name }}.sha256
          asset_content_type: text/plain

  docker:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/blipmq:${{ github.event.inputs.tag || github.ref_name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/blipmq:latest
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha
          cache-to: type=gha,mode=max