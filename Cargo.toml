[package]
name = "blipmq"
version = "1.0.0"
edition = "2021"
authors = ["Ashutosh Kumar <kumarashutosh34169@gmail.com>"]
description = "Ultra-lightweight, durable, high-throughput message queue written in Rust."
license = "BSD-3-Clause"
repository = "https://github.com/bravo1goingdark/blipmq"
default-run = "blipmq"
build = "build.rs"

# ───────────────────────────────────────────────────────────
# Library target ─ makes `blipmq::` usable everywhere
# ───────────────────────────────────────────────────────────
[lib]
name = "blipmq"          # must match the crate name used in `use blipmq::…`
path = "src/lib.rs"

# ───────────────────────────────────────────────────────────
# Binaries
# ───────────────────────────────────────────────────────────
# Main broker daemon
[[bin]]
name = "blipmq"          # `cargo run --bin blipmq`
path = "src/bin/blipmq.rs"

# CLI (pub / sub / unsub)
[[bin]]
name = "blipmq-cli"      # `cargo run --bin blipmq-cli -- …`
path = "src/bin/blipmq-cli.rs"

# Ultra-high performance server
# [[bin]]
# name = "blipmq-ultra"    # `cargo run --bin blipmq-ultra -- …`
# path = "src/bin/blipmq-ultra.rs"

# V2 server
# [[bin]]
# name = "blipmq-v2"       # `cargo run --bin blipmq-v2 -- …`
# path = "src/bin/blipmq-v2.rs"



[[bench]]
name = "network_benchmark"
harness = false
path = "benches/network_benchmark.rs"

[[bench]]
name = "timer_wheel_benchmark"
harness = false
path = "benches/timer_wheel_benchmark.rs"

[[bench]]
name = "production_benchmark"
harness = false
path = "benches/production_benchmark.rs"

# [[bench]]
# name = "ultra_performance_benchmark"
# harness = false
# path = "benches/ultra_performance_benchmark.rs"


# ───────────────────────────────────────────────────────────
# Dependencies
# ───────────────────────────────────────────────────────────
[dependencies]
tokio = { version = "1.46", features = ["rt-multi-thread", "net", "io-util", "macros", "time", "fs", "signal", "sync", "io-std"] }
 tracing = { version = "0.1.41", features = ["log"] }
 tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt", "std", "time", "local-time"] }
 serde = { version = "1.0", features = ["derive"] }
 serde_json = "1.0"
 toml = "0.9.2"
 anyhow = "1.0"
 dashmap = "6.1.0"
 clap = { version = "4.5", features = ["derive"] }
 rustyline = "17.0.1"
bytes = { version = "1.10.1", features = ["serde"] }
 crossbeam-queue = "0.3.12"
 flume = "0.11.1"
 once_cell = "1.21.3"
 futures = "0.3.31"
 flatbuffers = "25.2.10"
 tracing-appender = "0.2.3"
 ahash = "0.8"
 parking_lot = "0.12"
 num_cpus = "1.16"
 ctrlc = "3.4"
 crossbeam = "0.8"
 mio = "0.8"

 # Production-grade dependencies
 bincode = "1.3"
 sha2 = "0.10"
 base64 = "0.21"
uuid = { version = "1.0", features = ["v4", "serde"] }
rand = "0.8"
chrono = { version = "0.4", features = ["serde"] }

# Optional HTTP/REST API support
axum = { version = "0.7", optional = true }
tower = { version = "0.4", optional = true }
tower-http = { version = "0.5", features = ["cors", "trace", "timeout"], optional = true }
thiserror = "1.0"
async-trait = "0.1"

 # Optional performance features
 mimalloc = { version = "0.1", optional = true }
 windows-sys = { version = "0.59.0", optional = true, features = ["Win32_System_Threading"] }

[profile.bench]
debug = true

[build-dependencies]
flatbuffers-build = { version = "0.2.2", features = ["vendored"] }

[dev-dependencies]
criterion = "0.7.0"
nats = "0.25.0"
hdrhistogram = "7"
axum-test = "15.0"
tokio-test = "0.4"
tempfile = "3.5"
allocation-counter = "0.8"

[profile.release]
opt-level = 3
lto = "fat"
codegen-units = 1
panic = "abort"
strip = true
debug = false
overflow-checks = false
# Additional performance optimizations
inherits = "release"

# Ultra-performance profile for production builds
[profile.ultra]
inherits = "release"
opt-level = "z"  # Optimize for size and speed
lto = "fat"
codegen-units = 1
panic = "abort"
strip = true
debug = false
overflow-checks = false
# Enable aggressive optimizations
[profile.ultra.package."*"]
opt-level = 3

[features]
default = []
# Pin runtime threads or long-lived workers to CPU cores (Windows only implementation)
affinity = ["windows-sys"]
# Use mimalloc as global allocator
mimalloc = ["dep:mimalloc"]
# HTTP/REST API support
http-api = ["axum", "tower", "tower-http"]
# SIMD optimizations for message processing
simd = []
# Ultra-performance mode (combines multiple optimizations)
ultra = ["mimalloc", "affinity", "simd"]
# Production-ready build with all optimizations
production = ["ultra", "http-api"]
